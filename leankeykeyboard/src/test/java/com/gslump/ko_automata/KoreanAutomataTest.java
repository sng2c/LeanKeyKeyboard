/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.gslump.ko_automata;

import org.junit.Test;

import static com.gslump.ko_automata.KoreanAutomata.ComposingFsm.ComposingStatePrefix.*;
import static org.junit.Assert.*;

public class KoreanAutomataTest {


    @Test
    public void testAutomata0() {
        KoreanAutomata.ComposingContext context = new KoreanAutomata.ComposingContext();
        KoreanAutomata auto = new KoreanAutomata();
        KoreanAutomata.Output output = auto.type(context, "ㄱ");
        assertEquals(new KoreanAutomata.Output(null, "ㄱ"), output);
        assertEquals(FIRST, context.getStatePrefix());

        context.reset();
        output = auto.type(context, "ㅏ");
        assertEquals(new KoreanAutomata.Output(null, "ㅏ"), output);
        assertEquals(SINGLE_MIDDLE1, context.getStatePrefix());
        output = auto.type(context, "ㅜ");
        assertEquals(new KoreanAutomata.Output("ㅏ", "ㅜ"), output);
        assertEquals(SINGLE_MIDDLE1, context.getStatePrefix());
        output = auto.type(context, "ㅣ");
        assertEquals(new KoreanAutomata.Output(null, "ㅟ"), output);
        assertEquals(SINGLE_MIDDLE2, context.getStatePrefix());
        output = auto.type(context, "ㄱ");
        assertEquals(new KoreanAutomata.Output("ㅟ", "ㄱ"), output);
        assertEquals(FIRST, context.getStatePrefix());


    }

    @Test
    public void testAutomataFirstToMiddle() {
        KoreanAutomata.ComposingContext context = new KoreanAutomata.ComposingContext();
        KoreanAutomata auto = new KoreanAutomata();
        KoreanAutomata.Output output = auto.type(context, "ㄱ");
        assertEquals(new KoreanAutomata.Output(null, "ㄱ"), output);
        assertEquals(FIRST, context.getStatePrefix());

        output = auto.type(context, "ㄴ");
        assertEquals(new KoreanAutomata.Output("ㄱ", "ㄴ"), output);
        assertEquals(FIRST, context.getStatePrefix());

        output = auto.type(context, "ㅏ");
        assertEquals(new KoreanAutomata.Output(null, "나"), output);
        assertEquals(MIDDLE1, context.getStatePrefix());

        output = auto.type(context, "a");
        assertEquals(new KoreanAutomata.Output("나a", null), output);
        assertEquals(INIT, context.getStatePrefix());

        context.reset();
        auto.type(context, "ㄱ");
        auto.type(context, "ㅗ");
        output = auto.type(context, "ㅏ");
        assertEquals(new KoreanAutomata.Output(null, "과"), output);
        assertEquals(MIDDLE2, context.getStatePrefix());

        context.reset();
        auto.type(context, "ㄱ");
        auto.type(context, "ㅗ");
        output = auto.type(context, "ㅣ");
        assertEquals(new KoreanAutomata.Output(null, "괴"), output);
        assertEquals(MIDDLE2, context.getStatePrefix());

        context.reset();
        auto.type(context, "ㄱ");
        auto.type(context, "ㅜ");
        output = auto.type(context, "ㅏ");
        assertEquals(new KoreanAutomata.Output("구", "ㅏ"), output);
        assertEquals(SINGLE_MIDDLE1, context.getStatePrefix());
    }


    @Test
    public void testAutomataMiddle1toLast() {
        KoreanAutomata.ComposingContext context = new KoreanAutomata.ComposingContext();
        KoreanAutomata auto = new KoreanAutomata();
        KoreanAutomata.Output output = null;

        auto.type(context, "ㄱ");
        auto.type(context, "ㅗ");
        output = auto.type(context, "ㅁ");
        assertEquals(new KoreanAutomata.Output(null, "곰"), output);
        assertEquals(LAST1, context.getStatePrefix());

        auto.type(context, "ㄱ");
        auto.type(context, "ㅗ");
        auto.type(context, "ㅏ");
        auto.type(context, "ㄹ");
        output = auto.type(context, "ㅁ");
        assertEquals(new KoreanAutomata.Output(null, "괆"), output);
        assertEquals(LAST2, context.getStatePrefix());

    }

    @Test
    public void testAutomataLastToMiddle() {
        KoreanAutomata.ComposingContext context = new KoreanAutomata.ComposingContext();
        KoreanAutomata auto = new KoreanAutomata();
        KoreanAutomata.Output output = null;

        auto.type(context, "ㄱ");
        auto.type(context, "ㅗ");
        auto.type(context, "ㅁ");
        output = auto.type(context, "ㅜ");
        assertEquals(new KoreanAutomata.Output("고", "무"), output);
        assertEquals(MIDDLE1, context.getStatePrefix());

        auto.type(context, "ㄱ");
        auto.type(context, "ㅗ");
        auto.type(context, "ㅏ");
        auto.type(context, "ㄹ");
        auto.type(context, "ㅎ");
        output = auto.type(context, "ㅗ");
        assertEquals(new KoreanAutomata.Output("괄", "호"), output);
        assertEquals(MIDDLE1, context.getStatePrefix());
    }

    @Test
    public void testAutomataBackspace() {
        KoreanAutomata.ComposingContext context = new KoreanAutomata.ComposingContext();
        KoreanAutomata auto = new KoreanAutomata();
        KoreanAutomata.Output output;

        context.reset();
        output = auto.typeBackspace(context);
        assertEquals(new KoreanAutomata.Output(KoreanAutomata.BACKSPACE, null), output);
        assertEquals(INIT, context.getStatePrefix());


        context.reset();
        auto.type(context, "ㄱ");
        output = auto.type(context, String.valueOf((char)0x08));
        assertEquals(new KoreanAutomata.Output(null, null), output);
        assertEquals(INIT, context.getStatePrefix());

        context.reset();
        auto.type(context, "ㄱ");
        output = auto.typeBackspace(context);
        assertEquals(new KoreanAutomata.Output(null, null), output);
        assertEquals(INIT, context.getStatePrefix());

    }
}